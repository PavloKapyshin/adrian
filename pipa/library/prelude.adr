protocol Maybe(a) {}

struct Some(a) is Maybe(a) {
    data: a
}

struct None is Maybe(a) {}


struct String {
    data: py#Str
}

struct Number {
    data: py#Int
}

struct Vector(a) {
    data: py#List
}

struct Set(a) {
    data: py#Set
}

struct Dict(a, b) {
    data: py#Dict
}


protocol ConvertibleToString {
    fun __toString__(): String
}

protocol ConvertibleToNumber {
    fun __toNumber__(): Number
}

protocol ConvertibleToVector(a) {
    fun __toVector__(): Vector(a)
}

protocol ConvertibleToSet(a) {
    fun __toSet__(): Set(a)
}

protocol ConvertibleToDict(a, b) {
    fun __toDict__(): Dict(a, b)
}

protocol Addable {
    fun __add__(other: Self): Self
}

protocol Subtractable {
    fun __sub__(other: Self): Self
}

protocol Multipliable {
    fun __mul__(other: Self): Self
}

protocol Divisible {
    fun __div__(other: Self): Self
}

protocol Printable {
    fun __print__(): Void
}

protocol Lengthable {
    fun __length__(): Number
}

protocol Iterable(a) {
    fun __next__(): Maybe(a)
}

protocol GetItemable(a) {
    fun __getItem__(index: Number): Maybe(a)
}

protocol SetItemable(a) {
    fun __setItem__(index: Number, item: a): Void
}


extension Number is ConvertibleToNumber, ConvertibleToString, Addable,
                    Subtractable, Multipliable, Divisible {
    fun __toNumber__(): Number {
        return self
    }

    fun __toString__(): String {
        return String(py#toStr(self.data))
    }

    fun __add__(other: Number): Number {
        return Number(self.data + other.data)
    }

    fun __sub__(other: Number): Number {
        return Number(self.data - other.data)
    }

    fun __mul__(other: Number): Number {
        return Number(self.data * other.data)
    }

    fun __div__(other: Number): Number {
        return Number(self.data / other.data)
    }
}

extension String is ConvertibleToNumber, ConvertibleToString,
                    ConvertibleToVector(String), ConvertibleToSet(String),
                    Addable, Lengthable, GetItemable(String) {
    fun __add__(other: String): String {
        return String(self.data + other.data)
    }

    fun __toNumber__(): Number {
        return Number(py#toInt(self.data))
    }

    fun __toString__(): String {
        return self
    }

    fun __toVector__(): Vector(String) {
        return Vector(py#toList(self.data))
    }

    fun __toSet__(): Set(String) {
        return Set(py#toSet(self.data))
    }

    fun __length__(): Number {
        return Number(py#len(self.data))
    }

    fun __getItem__(index: Number): Maybe(String) {
        let got = self.data[index.data]
        if got is py#None {
            return None()
        }
        return Some(got)
    }
}

extension Vector(a) is ConvertibleToVector(a), ConvertibleToString,
                    ConvertibleToSet(a), Addable, Lengthable, GetItemable(a),
                    SetItemable(a) {
    fun __add__(other: Vector(a)): Vector(a) {
        return Vector(self.data + other.data)
    }

    fun __toVector__(): Vector(a) {
        return self
    }

    fun __toString__(): String {
        let separator = py#Str(", ")
        let dataLength = length(self).data
        var index = py#Int(0)
        var result = py#Str("[")
        for element in self.data {
            result += toString(element).data
            if index < (dataLength - py#Int(1)) {
                result += separator
            }
            index += py#Int(1)
        }
        return String(result + py#Str("]"))
    }

    fun __toSet__(): Set(a) {
        return Set(py#toSet(self.data))
    }

    fun __length__(): Number {
        return Number(py#len(self.data))
    }

    fun __getItem__(index: Number): Maybe(a) {
        let got = self.data[index.data]
        if got is py#None {
            return None()
        }
        return Some(got)
    }

    fun __setItem__(index: Number, item: a): Void {
        self.data[index.data] = item
    }

    fun append(element: a): Void {
        self.data += py#List([element])
    }

    fun extend(other: Vector(a)): Void {
        self.data += other
    }
}


fun toString(data: ConvertibleToString): String {
    return data.__toString__()
}

fun toNumber(data: ConvertibleToNumber): Number {
    return data.__toNumber__()
}

fun toVector(data: ConvertibleToVector(a)): Vector(a) {
    return data.__toVector__()
}

fun toSet(data: ConvertibleToSet(a)): Set(a) {
    return data.__toSet__()
}

fun toDict(data: ConvertibleToDict(a, b)): Dict(a, b) {
    return data.__toDict__()
}

fun print(data: ConvertibleToString): Void {
    py#print(toString(data).data)
}

fun length(data: Lengthable): Number {
    return data.__length__()
}
