-- assignments
var name = py#Str("John")
py#print(name)
name = py#Str("Mike")
py#print(name)

var greeting = py#Str("Hello")
let separator = py#Str(", ")
name = py#Str("Nick")
let end = py#Str("!")
greeting += separator + name + end
py#print(greeting)

py#print()

var number = py#Int(10)
py#print(number)
number += py#Int(1)
py#print(number)
number -= py#Int(6)
py#print(number)
number *= py#Int(2)
py#print(number)
number /= py#Int(2)
py#print(number)

py#print()

-- functions
fun aliasForPrint(src: py#Str): Void {
    py#print(src)
}

fun returnTheSame(src: py#Int): py#Int {
    return src
}

fun addOne(src: py#Int): py#Int {
    return src + py#Int(1)
}

fun addOneList(src: py#List): py#List {
    var result = py#List([])
    for element in src {
        result += py#List([addOne(element)])
    }
    return result
}

fun returnFirstInt(src: py#List): py#Int {
    for element in src {
        return element
    }
    -- if list has no elements
    return py#Int(0)
}

fun myLength(src: py#List): py#Int {
    var len = py#Int(0)
    for element in src {
        len += py#Int(1)
    }
    return len
}

-- function usage
aliasForPrint(py#Str("Hello, functions!"))
let same = returnTheSame(py#Int(1))

py#print(same)
py#print(addOne(same))

let initialList = py#List([py#Int(0), py#Int(1), py#Int(2)])
py#print(initialList)
let newList = addOneList(initialList)
py#print(newList)

py#print()
py#print(returnFirstInt(py#List([py#Int(1)])))
py#print(returnFirstInt(py#List([])))

py#print()
py#print(myLength(py#List([py#Int(1), py#Int(2), py#Str("Hi")])))

py#print()
-- struct declarations
struct Dummy {}
struct MyInt {
    data: py#Int
}

struct ContainerOfMyInt {
    inner: MyInt

    fun printMe(): Void {
        py#print(self.inner.data)
    }

    fun setToZero(): Void {
        self.inner.data = py#Int(0)
    }

    fun getValue(): py#Int {
        return self.inner.data
    }
}

struct MyNumber {
    data: py#Int

    fun __add__(another: MyNumber): MyNumber {
        return MyNumber(self.data + another.data)
    }
}

extension MyNumber {
    fun print(): Void {
        py#print(self.data)
    }
}

-- structs, fields and methods usage
let dummy = Dummy()
let myInt1 = MyInt(py#Int(1))
py#print(myInt1.data)
myInt1.data = py#Int(5)
py#print(myInt1.data)
myInt1.data += py#Int(1)
py#print(myInt1.data)

py#print()
let containerOfMyInt = ContainerOfMyInt(myInt1)
py#print(containerOfMyInt.inner.data)
containerOfMyInt.inner.data = py#Int(1)
py#print(containerOfMyInt.inner.data)
containerOfMyInt.inner = MyInt(py#Int(2))
py#print(containerOfMyInt.inner.data)

py#print()
containerOfMyInt.printMe()
py#print(containerOfMyInt.getValue())
containerOfMyInt.setToZero()
py#print(containerOfMyInt.getValue())

py#print()
let a = MyNumber(py#Int(1))
a.print()
let b = MyNumber(py#Int(2))
b.print()
var c = a + b
c.print()
c += a
c.print()

py#print()

-- Conditional stmts
py#print(py#Str("Conditional stmts:"))
var n = py#Int(0)
while n <= py#Int(3) {
    py#print(n)
    n += py#Int(1)
}

py#print()
if py#Int(5) > py#Int(1) {
    py#print(py#Str("True"))
} else {
    py#print(py#Str("LOL"))
}

if py#Int(1) > py#Int(5) {
    py#print(py#Str("LOL1"))
} elif py#Int(5) == py#Int(5) {
    py#print(py#Str("True"))
} else {
    py#print(py#Str("LOL2"))
}


if py#Int(1) > py#Int(5) {
    py#print(py#Str("LOL1"))
} elif py#Int(2) > py#Int(3) {
    py#print(py#Str("LOL2"))
} elif py#Int(5) == py#Int(5) {
    py#print(py#Str("True"))
} else {
    py#print(py#Str("LOL3"))
}


py#print()

-- Protocol Tests
py#print("Protocol Tests:")
protocol Node {
    fun printNode(): Void
}

struct VarDecl is Node {
    name: py#Str

    fun printNode(): Void {
        py#print(py#Str("I am a variable declaration!"))
        py#print(py#Str("My name is "), self.name)
    }
}

let aDecl = VarDecl(py#Str("a"))
aDecl.printNode()
