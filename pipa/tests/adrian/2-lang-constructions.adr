-- assignments
var name = py#Str("John")
py#print(name)
name = py#Str("Mike")
py#print(name)

var greeting = py#Str("Hello")
let separator = py#Str(", ")
name = py#Str("Nick")
let end = py#Str("!")
greeting += separator + name + end
py#print(greeting)

py#print()

var number = py#Int(10)
py#print(number)
number += py#Int(1)
py#print(number)
number -= py#Int(6)
py#print(number)
number *= py#Int(2)
py#print(number)
number /= py#Int(2)
py#print(number)

py#print()

-- functions
fun aliasForPrint(src: py#Str): Void {
    py#print(src)
}

fun returnTheSame(src: py#Int): py#Int {
    return src
}

fun addOne(src: py#Int): py#Int {
    return src + py#Int(1)
}

fun addOneList(src: py#List): py#List {
    var result = py#List([])
    for element in src {
        result += py#List([addOne(element)])
    }
    return result
}

fun returnFirstInt(src: py#List): py#Int {
    for element in src {
        return element
    }
    -- if list has no elements
    return py#Int(0)
}

fun myLength(src: py#List): py#Int {
    var len = py#Int(0)
    for element in src {
        len += py#Int(1)
    }
    return len
}

-- function usage
aliasForPrint(py#Str("Hello, functions!"))
let same = returnTheSame(py#Int(1))

py#print(same)
py#print(addOne(same))

let initialList = py#List([py#Int(0), py#Int(1), py#Int(2)])
py#print(initialList)
let newList = addOneList(initialList)
py#print(newList)

py#print()
py#print(returnFirstInt(py#List([py#Int(1)])))
py#print(returnFirstInt(py#List([])))

py#print()
py#print(myLength(py#List([py#Int(1), py#Int(2), py#Str("Hi")])))

py#print()
-- struct declarations
struct Dummy {}
struct MyInt {
    data: py#Int
}

struct ContainerOfMyInt {
    inner: MyInt
}

-- structs, fields and methods usage
let dummy = Dummy()
let myInt1 = MyInt(py#Int(1))
py#print(myInt1.data)
myInt1.data = py#Int(5)
py#print(myInt1.data)
myInt1.data += py#Int(1)
py#print(myInt1.data)

py#print()
let containerOfMyInt = ContainerOfMyInt(myInt1)
py#print(containerOfMyInt.inner.data)
containerOfMyInt.inner.data = py#Int(1)
py#print(containerOfMyInt.inner.data)
containerOfMyInt.inner = MyInt(py#Int(2))
py#print(containerOfMyInt.inner.data)
