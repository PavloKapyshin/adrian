%source {
    #include "adrian_ast.h"
}
%value "void*"


statement <- d:let_declaration {$$ = d;}

let_declaration <- _ "let" _ n:name _ "=" _ e:expression _ EOL {
    Type* type = Type_new();
    type->empty = Empty_new();
    LetDeclaration* result = LetDeclaration_new(n, type, e);
    printf(
        "Parsed let declaration: name = %s, number_literal = %s\n",
        result->name, result->expr->literal->text);
    $$ = result;
}

name <- [a-zA-Z_][a-zA-Z0-9_]* {$$ = (void*)$0;}

expression <- l:literal {
    Expr* expr = Expr_new();
    expr->literal = l;
    $$ = expr;
}

literal <- n:number_literal {$$ = n;}

number_literal <- [0-9]+ {
    $$ = Literal_new(NumberLiteralType, (char*)$0);
}

_ <- [ \t]*

EOL <- "\n"

%%
int main() {
    pcc_context_t *ctx = pcc_create(NULL);
    while (pcc_parse(ctx, NULL));
    pcc_destroy(ctx);
    return 0;
}
