inf Maybe
sct Some(valueType) is Maybe {value: valueType}
sct Nothing is Maybe


sct Cons(valueType) is (Lengthable) {
    value: valueType
    next: Maybe(Cons(valueType))

    fun __length__(): Integer {
        var current = self.next
        var len = 1
        whl isSome(current) {
            current = current.next
            len += 1
        }
        ret len
    }

    fun getNth(n: Integer): Either(Error, Node(valueType)) {
        var i = 0
        var current = self
        whl i < n {
            var next = current.next
            iff not isSome(next) {
                ret Left("list is too short")
            }
            els {
                current = valueOf(next)
            }
            i++
        }
        ret Right(current)
    }

    fun getNthValue(n: Integer): valueType {
        ret self.getNth(n).value
    }
}


sct Integer is Lengthable {
    _chunks: Cons(c#IntFast32)
    _length: Cons(c#IntFast32)

    fun __init__(): None {
        self._length = Cons(c#IntFast32(0), next = Nothing())
        self._chunks = Cons(c#IntFast32(0), next = Nothing())
    }

    fun __length__(): Integer {
        var sum = Integer.fromIntFast32(self._length[0])
        var len = length(self._length) -- >= 1
        var i = 1
        whl i != len {
            sum.addIntFast32(self._length[i])
            i += 1
        }
        ret sum
    }
}