cst _ROMAN_NUMBER_TO_INTEGER = {
    "I" = 1,
    "V" = 5,
    "X" = 10,
}

struct RomanNumber {
    data: Integer

    fun _parseCharToInteger(char: String) {
        iff char in _ROMAN_NUMBER_TO_INTEGER {
            ret _ROMAN_NUMBER_TO_INTEGER[char]
        }
        print("Unknown roman number \{char}.")
    }

    fun _parseStringToInteger(str: String) {
        var stack: structs#Stack(Integer)
        for char in str {
            stack.push(_parseCharToInteger(char))
        }
        var correspondingInteger = 0
        var lastInteger =  0
        while not stack.isEmpty() {
            var elem = stack.pop()
            iff lastInteger <= elem {
                correspondingInteger += elem
            } else {
                correspondingInteger -= elem
            }
            lastInteger = elem
        }
        ret correspondingInteger
    }

    fun init(num: String) {
        self.data = self._parseStringToInteger(num)
    }

    fun add(num1, num2: RomanNumber) {
        ret RomanNumber(num1.data + num2.data)
    }

    fun sub(num1, num2: RomanNumber) {
        ret RomanNumber(num1.data - num2.data)
    }

    fun mul(num1, num2: RomanNumber) {
        ret RomanNumber(num1.data * num2.data)
    }

    fun div(num1, num2: RomanNumber) {
        ret RomanNumber(num1.data / num2.data)
    }

    fun toString() {
        -- TODO: from Integer to roman number string
        ret self.data.toString()
    }
}