fun error(msg: string) {
    print(msg)
}


struct Person {
    var firstName, secondName: String

    fun init(firstName, secondName: String) {
        self.firstName = firstName
        self.secondName = secondName
    }

    fun str(): String {
        return "".join([self.firstName, self.secondName])
    }
}


struct VectorOfPerson {
    var vector: Vector(Person)
    var _index: Integer

    fun getItem(index: Integer): Person? {
        if index < self.vector.length() {
            return self.vector[index]
        }
        error("out of bounds.")
        return None
    }

    fun setItem(value: Person; index: Integer) {
        self.vector[index] = value
    }

    fun next() {
        var result = self.vector[self._index]
        self._index += 1
        if self._index == self.vector.length() {
            -- Iteration ended, that was the last element
            self._index = 0
        }
        return result
    }
}


var users = VectorOfPerson()
users[0] = Person("John", "Mayers")
users[1] = Person("Mike", "Docker")
for user in users {
    print(user)
}
----
var user: Person
do {
    user = users.next()
    print(user.str())
} while users._index > 0