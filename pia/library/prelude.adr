-- Core library. Don't use syntax sugar here.
struct Some(a) {
    data: a
}

struct None {}

adt Maybe(a) {
    Some(a), None
}


struct String {
    data: py#Str
}

struct Number {
    data: py#Int
}

struct Vector(a) {
    data: py#List

    fun append(element: a): Void {
        self.data.append(element)
    }

    fun __getitem__(index: Number): Maybe(a) {
        let got: py#Maybe = self.data[index]
        if got is py#None {
            return Maybe.None()
        }
        return Maybe.Some(got)
    }
}


protocol ConvertibleToString {
    fun __toString__(): String
}

protocol ConvertibleToNumber {
    fun __toNumber__(): Number
}

protocol Lengthable {
    fun __length__(): Number
}


extension String is ConvertibleToNumber {
    fun __toNumber__(): Number {
        return Number(py#toInt(self.data))
    }
}

extension Number is ConvertibleToString {
    fun __toString__(): String {
        return String(py#toStr(self.data))
    }
}

extension String is ConvertibleToString {
    fun __toString__(): String {
        return self
    }
}

extension String is Lengthable {
    fun __length__(): Number {
        return Number(py#len(self.data))
    }
}

extension Vector(a) is Lengthable {
    fun __length__(): Number {
        return Number(py#len(self.data))
    }
}


fun toString(object: ConvertibleToString): String {
    return object.__toString__()
}

fun toNumber(object: ConvertibleToNumber): Number {
    return object.__toNumber__()
}


fun print(data: ConvertibleToString): Void {
    let converted = toString(data)
    py#print(converted.data)
}


fun length(data: Lengthable): Number {
    return data.__length__()
}
