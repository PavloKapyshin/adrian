struct Vector(someType) {
    var length: c#Int64
    var data: c#Pointer(c#Pointer(c#Void))
    const self._elemSize = c#sizeof(c#Pointer(c#Void))

    fun init(): None {
        self.length = 0
        self.data = c#Null
    }

    fun _allocateMemoryForData(): c#Pointer(c#Void) {
        return c#calloc(self.length, self._elemSize)
    }

    fun copy(): Vector(someType) {
        var result = Vector(someType)
        result.length = self.length
        result.data = self._allocateMemoryForData()
        c#memcpy(result.data, self.data, self.length * self._elemSize)
        return result
    }

    fun setItem(value: c#Pointer(c#Void); index: c#Int64): None {
        if index >= self.length {
            var oldLength = self.length
            self.length = index + 1
            var newData = self._allocateMemoryForData()
            c#memcpy(newData, self.data, self.length * self._elemSize)
            c#free(self.data)
            self.data = newData
        }
        -- Shallow copy
        self.data[index] = value
        -- Real copy: c#memcpy(self.data[index], value, self._elemSize)
    }

    fun getItem(index: c#Int64): someType? {
        if index < self.length {
            return self.data[index]
        }
        print("ERROR: OUT OF BOUNDS")
        return None
    }

    -- Generated: start
    fun deinit(): None {
        c#free(self.data)
        c#free(self)
    }
    -- end
}


-------------------------------------------------
struct Integer {
    var length: c#Int64
    var digits: c#String
}

fun Integer.init(digits: c#String): None {
    self.digits = digits
    self.length = 
}


------------------------------------------------
---- some_module.adr
fun Integer.myExtensionMethod() {
    print("Hello, extension!")
}
n
-- Every struct can do it with non specialized methods:
121.myExtensionMethod()
-----------------------------------------------
struct String {
    var length: c#Int64
    var data: c#Pointer(c#Char)

    fun append(elem: c#Char) {
        self.data[length] = elem -- fucking implementation
    }
}

-- some_module.adr
-- syntactic sugar:
"123".append("4")
std_types#String.append("123", "4")

-- some_module.adr
-- syntactic sugar:
var users = Vector<User>(sorted = True)
var users = Vector(User)(sorted = True)
var users: Vector(User) = Vector(sorted = True)


struct S {
    str: String

    fun init(aStr: type(str)): None {
        self.str = aStr
    }
}